<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApplicationError" xml:space="preserve">
    <value>An error has occurred. Please, submit the file {0} to:
augusto.ruiz@gmail.com.
Thank you!</value>
  </data>
  <data name="ChannelWithNumber" xml:space="preserve">
    <value>Channel {0}</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="FX" xml:space="preserve">
    <value>FX</value>
  </data>
  <data name="FXFilter" xml:space="preserve">
    <value>WYZTracker .FX Effects File (*.fx)|*.fx|WYZTracker .WYZ Files (*.wyz)|*.wyz|All Files (*.*)|*.*</value>
  </data>
  <data name="IdAlreadyInUse" xml:space="preserve">
    <value>Effect '{0}' is already using this Id.</value>
  </data>
  <data name="INSFilter" xml:space="preserve">
    <value>WYZTracker .INS Instrument Files (*.ins)|*.ins|WYZTracker .WYZ Files (*.wyz)|*.wyz|All Files (*.*)|*.*</value>
  </data>
  <data name="InstrIdAlreadyInUse" xml:space="preserve">
    <value>Instrument '{0}' is already using this Id.</value>
  </data>
  <data name="MUSFilter" xml:space="preserve">
    <value>WYZTracker .MUS Files (*.mus)|*.mus|All Files (*.*)|*.*</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>New</value>
  </data>
  <data name="NewSong" xml:space="preserve">
    <value>New song</value>
  </data>
  <data name="OpenVerb" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="Piano" xml:space="preserve">
    <value>Piano</value>
  </data>
  <data name="TransposeError" xml:space="preserve">
    <value>You must input the number of semitones to transpose.</value>
  </data>
  <data name="WYZFileDesc" xml:space="preserve">
    <value>WYZTracker song file.</value>
  </data>
  <data name="WYZFilter" xml:space="preserve">
    <value>WYZTracker .WYZ Files (*.wyz)|*.wyz|All Files (*.*)|*.*</value>
  </data>
  <data name="WYZTrackerTitle" xml:space="preserve">
    <value>WYZTracker - {0}</value>
  </data>
  <data name="YetToCome" xml:space="preserve">
    <value>Not yet ready... :(</value>
  </data>
  <data name="NewPattern" xml:space="preserve">
    <value>New pattern</value>
  </data>
  <data name="PatternWithNumber" xml:space="preserve">
    <value>Pattern {0}</value>
  </data>
  <data name="ArpeggioFilter" xml:space="preserve">
    <value>WYZTracker .ARP Files (*.arp)|*.arp|All Files (*.*)|*.*</value>
  </data>
  <data name="Chromatic" xml:space="preserve">
    <value>Chromatic</value>
  </data>
  <data name="Dorian" xml:space="preserve">
    <value>Dorian</value>
  </data>
  <data name="HarmonicMinor" xml:space="preserve">
    <value>Harmonic Minor</value>
  </data>
  <data name="Lydian" xml:space="preserve">
    <value>Lydian</value>
  </data>
  <data name="Major" xml:space="preserve">
    <value>Major</value>
  </data>
  <data name="MelodicMinor" xml:space="preserve">
    <value>Melodic Minor</value>
  </data>
  <data name="Mixolydian" xml:space="preserve">
    <value>Mixolydian</value>
  </data>
  <data name="NaturalMinor" xml:space="preserve">
    <value>Natural Minor</value>
  </data>
  <data name="NoScale" xml:space="preserve">
    <value>Octaves Only</value>
  </data>
  <data name="PentatonicMajor1" xml:space="preserve">
    <value>Pentatonic Major 1</value>
  </data>
  <data name="PentatonicMajor2" xml:space="preserve">
    <value>Pentatonic Major 2</value>
  </data>
  <data name="PentatonicMinor" xml:space="preserve">
    <value>Pentatonic Minor</value>
  </data>
  <data name="Phrygian" xml:space="preserve">
    <value>Phrygian</value>
  </data>
  <data name="WholeTone" xml:space="preserve">
    <value>Whole Tone</value>
  </data>
  <data name="AugmentedTriad" xml:space="preserve">
    <value>Augmented Triads</value>
  </data>
  <data name="DiminishedTriad" xml:space="preserve">
    <value>Diminished Triads</value>
  </data>
  <data name="MajorTriad" xml:space="preserve">
    <value>Major Triads</value>
  </data>
  <data name="MinorTriad" xml:space="preserve">
    <value>Minor Triads</value>
  </data>
  <data name="CPC" xml:space="preserve">
    <value>Amstrad CPC</value>
  </data>
  <data name="MSX" xml:space="preserve">
    <value>MSX</value>
  </data>
  <data name="RestartMessage" xml:space="preserve">
    <value>The application must be restarted in order to change current language. Do you want to save the current song?</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="ExportFilter" xml:space="preserve">
    <value>Archivos de audio .OGG (*.ogg)|*.ogg|Audio files .WAV (*.wav)|*.wav|All files (*.*)|*.*</value>
  </data>
  <data name="DownloadOpenAL" xml:space="preserve">
    <value>WYZTracker needs OpenAL in order to work properly. Would you like to download it now?</value>
  </data>
  <data name="OpenALSetupError" xml:space="preserve">
    <value>Couldn't install OpenAL. Please, install it manually.</value>
  </data>
  <data name="OpenALInstallError" xml:space="preserve">
    <value>Couldn't install OpenAL properly. Please install OpenAL manually.</value>
  </data>
  <data name="ZX" xml:space="preserve">
    <value>ZX Spectrum</value>
  </data>
</root>